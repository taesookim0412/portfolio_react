import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';

export interface ActiveTriangleState {
  activeState: string,
  activeFramework: string,
  activeProject: string
}
export interface FrameworkMap{
  '0': string,
  '1': string,
  '2': string,
}
export const frameworkMap = {
  '0': 'react',
  '1': 'angular',
  '2': 'android'
}
const initialState: ActiveTriangleState = {
  activeState: 'home',
  activeFramework: '0',
  activeProject: '0'
};

export const activeTriangle = createSlice({
  name: 'activeTriangle',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setHome: (state) => {
      state.activeState = "home"
    },
    setProjects: (state) => {
      state.activeState = "projects"
    },
    setAbout: (state) => {
      state.activeState = "about"
    },
    setActiveFrameworkReact: (state) =>{
      state.activeFramework = "0";
      state.activeProject = "0";
    },
    setActiveFrameworkAngular: (state) =>{
      state.activeFramework = "1";
      state.activeProject = "0";
    },
    setActiveFrameworkAndroid: (state) =>{
      state.activeFramework = "2";
      state.activeProject = "0";
    },
    incrementProject: (state, projectCt) => {
      state.activeProject = (Math.min(projectCt.payload - 1, parseInt(state.activeProject) + 1)).toString()
    },
    decrementProject: (state) => {
      state.activeProject = (Math.max(0, parseInt(state.activeProject) - 1)).toString()
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const { setHome, setProjects, setAbout, incrementProject, decrementProject, setActiveFrameworkReact, setActiveFrameworkAngular, setActiveFrameworkAndroid } = activeTriangle.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectTriangleState = (state: RootState) => state.activeTriangle.activeState;
export const selectActiveFramework = (state: RootState) => state.activeTriangle.activeFramework;
export const selectActiveProject = (state: RootState) => state.activeTriangle.activeProject;


export default activeTriangle.reducer;
